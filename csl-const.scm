(module csl-const ()
  (import chicken scheme foreign)
  (use foreigners)
  (foreign-declare "#include <gsl/gsl_const_mksa.h>")
  (foreign-declare "#include <gsl/gsl_const_cgsm.h>")
  (foreign-declare "#include <gsl/gsl_const.h>")

  (define-syntax def-const
    (ir-macro-transformer
     (lambda (e i c)
       (define (get-gsl-name name type)
         (string-upcase
          (string-append "GSL_CONST_"
                         (cond ((eq? type unit:)
                                (conc mksa: "_"))
                               (else
                                (conc type "_")))
                         name)))
       (define (get-csl-name name type)
         (string->symbol
          (conc "csl:"
                (if (eq? type cgsm:)
                    "cgsm-"
                    "")
                name)))
       (define (make-standard-defs name type)
         (let* ((strname (get-gsl-name name type))
                (def `(begin
                        (export ,(string->symbol strname))
                        (define ,(string->symbol strname)
                          (foreign-value ,strname double)))))
           (if (eq? type unit:)
               (cons def (make-standard-defs name cgsm:))
               (list def))))
       (define (make-csl-defs name alt-names type)
         (let loop ((lst alt-names)
                    (res '()))
           (cond ((null? lst)
                  (if (eq? type unit:)
                      (append (make-csl-defs name alt-names cgsm:) res)
                      res))
                 ((eq? (car lst) override:)
                  (loop (cdr lst) res))
                 (else
                  (loop (cdr lst)
                        (cons
                         `(begin
                            (export ,(get-csl-name (strip-syntax (car lst)) type))
                            (define ,(get-csl-name (strip-syntax (car lst)) type)
                              ,(string->symbol (get-gsl-name name type))))
                         res))))))
       (let* ((type (cadr e))
              (name (caddr e))
              (override (member override: (cdddr e)))
              (alt-names (if override
                             (cdddr e)
                             (cons (string->symbol
                                    (string-downcase
                                     (irregex-replace/all
                                      "_"
                                      (caddr e)
                                      "-")))
                                   (cdddr e)))))
         `(begin
            ,@(make-standard-defs name type)
            ,@(make-csl-defs name alt-names type))))))

  (def-const unit: "SPEED_OF_LIGHT" c)
  (def-const mksa: "VACUUM_PERMEABILITY" free-space-permeability mu_0)
  (def-const mksa: "VACUUM_PERMITTIVITY" free-space-permittivity epsilon_0)
  (def-const unit: "PLANCKS_CONSTANT_H" override: planck h)
  (def-const unit: "PLANCKS_CONSTANT_HBAR" override: hbar)
  (def-const num: "AVOGADRO" N_a)
  (def-const unit: "FARADAY" F)
  (def-const unit: "BOLTZMANN" k)
  (def-const unit: "MOLAR_GAS" override: gas-constant R)
  (def-const unit: "STANDARD_GAS_VOLUME" V_0)
  (def-const unit: "STEFAN_BOLTZMANN_CONSTANT" override: stefan-boltzmann)
  (def-const mksa: "GAUSS")

  (def-const unit: "ASTRONOMICAL_UNIT" au)
  (def-const unit: "GRAVITATIONAL_CONSTANT" G g)
  (def-const unit: "LIGHT_YEAR" ly)
  (def-const unit: "PARSEC" pc)
  (def-const unit: "GRAV_ACCEL" override: g)
  (def-const unit: "SOLAR_MASS")

  (def-const unit: "ELECTRON_CHARGE")
  (def-const unit: "ELECTRON_VOLT" eV)
  (def-const unit: "UNIFIED_ATOMIC_MASS" amu)
  (def-const unit: "MASS_ELECTRON" m_e)
  (def-const unit: "MASS_MUON")
  (def-const unit: "MASS_PROTON" m_p)
  (def-const unit: "MASS_NEUTRON" m_n)
  (def-const num: "FINE_STRUCTURE" override: fine-structure-constant)
  (def-const unit: "RYDBERG" Ry)
  (def-const unit: "BOHR_RADIUS" a_0)
  (def-const unit: "ANGSTROM")
  (def-const unit: "BARN")
  (def-const unit: "BOHR_MAGNETON" mu_B)
  (def-const unit: "NUCLEAR_MAGNETON" mu_N)
  (def-const unit: "ELECTRON_MAGNETIC_MOMENT" mu_e)
  (def-const unit: "PROTON_MAGNETIC_MOMENT" mu_p)
  (def-const unit: "THOMSON_CROSS_SECTION" sigma_T)
  (def-const mksa: "DEBYE" D)

  (def-const unit: "MINUTE")
  (def-const unit: "HOUR")
  (def-const unit: "DAY")
  (def-const unit: "WEEK")
  (define csl:year (* 365.25 csl:day))
  (define csl:cgsm-year (* 365.25 csl:day))

  (def-const unit: "INCH" in)
  (def-const unit: "FOOT" ft)
  (def-const unit: "YARD" yd)
  (def-const unit: "MILE" mi)
  (def-const unit: "MIL")

  (def-const unit: "KILOMETERS_PER_HOUR" kph)
  (def-const unit: "MILES_PER_HOUR" mph)
  (def-const unit: "NAUTICAL_MILE")
  (def-const unit: "FATHOM")
  (def-const unit: "KNOT")

  (def-const unit: "POINT")
  (def-const unit: "TEXPOINT")

  (def-const unit: "MICRON")
  (def-const unit: "HECTARE")
  (def-const unit: "ACRE")
  (def-const unit: "LITER")
  (def-const unit: "US_GALLON")
  (def-const unit: "CANADIAN_GALLON")
  (def-const unit: "UK_GALLON")
  (def-const unit: "QUART")
  (def-const unit: "PINT")

  (def-const unit: "POUND_MASS")
  (def-const unit: "OUNCE_MASS")
  (def-const unit: "TON")
  (def-const unit: "METRIC_TON" tonne)
  (def-const unit: "UK_TON")
  (def-const unit: "TROY_OUNCE")
  (def-const unit: "CARAT")
  (def-const unit: "GRAM_FORCE")
  (def-const unit: "POUND_FORCE")
  (def-const unit: "KILOPOUND_FORCE")
  (def-const unit: "POUNDAL")

  (def-const unit: "CALORIE")
  (def-const unit: "BTU")
  (def-const unit: "THERM")
  (def-const unit: "HORSEPOWER")

  (def-const unit: "BAR")
  (def-const unit: "STD_ATMOSPHERE" override: atm standard-atmosphere)
  (def-const unit: "TORR")
  (def-const unit: "METER_OF_MERCURY")
  (def-const unit: "INCH_OF_MERCURY")
  (def-const unit: "INCH_OF_WATER")
  (def-const unit: "PSI")

  (def-const unit: "POISE")
  (def-const unit: "STOKES")

  (def-const unit: "STILB")
  (def-const unit: "LUMEN")
  (def-const unit: "LUX")
  (def-const unit: "PHOT")
  (def-const unit: "FOOTCANDLE")
  (def-const unit: "LAMBERT")
  (def-const unit: "FOOTLAMBERT")

  (def-const unit: "CURIE")
  (def-const unit: "ROENTGEN")
  (def-const unit: "RAD")

  (def-const unit: "NEWTON" N)
  (def-const unit: "DYNE")
  (def-const unit: "JOULE" J)
  (def-const unit: "ERG")

  (def-const num: "YOTTA")
  (def-const num: "ZETTA")
  (def-const num: "EXA")
  (def-const num: "PETA")
  (def-const num: "TERA")
  (def-const num: "GIGA")
  (def-const num: "MEGA")
  (def-const num: "KILO")
  (def-const num: "MILLI")
  (def-const num: "MICRO")
  (def-const num: "MICRO")
  (def-const num: "NANO")
  (def-const num: "FEMTO")
  (def-const num: "ATTO")
  (def-const num: "ZEPTO")
  (def-const num: "YOCTO"))
