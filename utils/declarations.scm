(import (only chicken.base error when alist-ref define-constant)
        (only chicken.condition signal condition)
        chicken.foreign)

(foreign-declare "#include <gsl/gsl_errno.h>")

(define-external (scheme_make_rect (double r) (double i)) scheme-object
  (make-rectangular r i))

(define-foreign-type unsigned_byte unsigned-byte)
(define-foreign-type unsigned_short unsigned-short)
(define-foreign-type unsigned_int unsigned-int)

(define-foreign-type unsigned_long unsigned-long)

(foreign-declare "typedef char byte;")
(foreign-declare "typedef unsigned char unsigned_byte;")
(foreign-declare "typedef unsigned short unsigned_short;")
(foreign-declare "typedef unsigned int unsigned_int;")
(foreign-declare "typedef unsigned long unsigned_long;")


(define-foreign-variable GSL_SUCCESS int)
(define-foreign-variable GSL_FAILURE int)
(define-foreign-variable GSL_CONTINUE int)
(define-foreign-variable GSL_EDOM int)
(define-foreign-variable GSL_ERANGE int)
(define-foreign-variable GSL_EFAULT int)
(define-foreign-variable GSL_EINVAL int)
(define-foreign-variable GSL_EFAILED int)
(define-foreign-variable GSL_EFACTOR int)
(define-foreign-variable GSL_ESANITY int)
(define-foreign-variable GSL_ENOMEM int)
(define-foreign-variable GSL_EBADFUNC int)
(define-foreign-variable GSL_ERUNAWAY int)
(define-foreign-variable GSL_EMAXITER int)
(define-foreign-variable GSL_EZERODIV int)
(define-foreign-variable GSL_EBADTOL int)
(define-foreign-variable GSL_ETOL int)
(define-foreign-variable GSL_EUNDRFLW int)
(define-foreign-variable GSL_EOVRFLW int)
(define-foreign-variable GSL_ELOSS int)
(define-foreign-variable GSL_EROUND int)
(define-foreign-variable GSL_EBADLEN int)
(define-foreign-variable GSL_ENOTSQR int)
(define-foreign-variable GSL_ESING int)
(define-foreign-variable GSL_EDIVERGE int)
(define-foreign-variable GSL_EUNSUP int)
(define-foreign-variable GSL_EUNIMPL int)
(define-foreign-variable GSL_ECACHE int)
(define-foreign-variable GSL_ETABLE int)
(define-foreign-variable GSL_ENOPROG int)
(define-foreign-variable GSL_ENOPROGJ int)
(define-foreign-variable GSL_ETOLF int)
(define-foreign-variable GSL_ETOLX int)
(define-foreign-variable GSL_ETOLG int)
(define-foreign-variable GSL_EOF int)

(define errno-to-symbol
  `((,GSL_FAILURE . failure)
    (,GSL_CONTINUE . continue)
    (,GSL_EDOM . dom)
    (,GSL_ERANGE . range)
    (,GSL_EFAULT . fault)
    (,GSL_EINVAL . inval)
    (,GSL_EFAILED . failed)
    (,GSL_EFACTOR . factor)
    (,GSL_ESANITY . sanity)
    (,GSL_ENOMEM . nomem)
    (,GSL_EBADFUNC . badfunc)
    (,GSL_ERUNAWAY . runaway)
    (,GSL_EMAXITER . maxiter)
    (,GSL_EZERODIV . zerodiv)
    (,GSL_EBADTOL . badtol)
    (,GSL_ETOL . tol)
    (,GSL_EUNDRFLW . undrflw)
    (,GSL_EOVRFLW . ovrflw)
    (,GSL_ELOSS . loss)
    (,GSL_EROUND . round)
    (,GSL_EBADLEN . badlen)
    (,GSL_ENOTSQR . notsqr)
    (,GSL_ESING . sing)
    (,GSL_EDIVERGE . diverge)
    (,GSL_EUNSUP . unsup)
    (,GSL_EUNIMPL . unimpl)
    (,GSL_ECACHE . cache)
    (,GSL_ETABLE . table)
    (,GSL_ENOPROG . noprog)
    (,GSL_ENOPROGJ . noprogj)
    (,GSL_ETOLF . tolf)
    (,GSL_ETOLX . tolx)
    (,GSL_ETOLG . tolg)
    (,GSL_EOF . eof)))


(define-external (csl_err (c-string reason) (c-string file) (int line) (int errno)) void
  ;; (error (format "gsl: ~a:~a: ~a" file line reason))
  (when (not (= errno GSL_SUCCESS))
    (signal (condition `(gsl file ,file line ,line)
                       `(,(alist-ref errno errno-to-symbol = 'unknown-error)
                         description ,(gsl-strerror errno))
                       `(exn message ,reason)))))

(define gsl_set_error_handler
  (foreign-lambda void "gsl_set_error_handler" (c-pointer void)))

(gsl_set_error_handler (location csl_err))
