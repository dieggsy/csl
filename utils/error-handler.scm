(import (only chicken.base void alist-ref when)
        (only chicken.condition condition signal))

(define errno-to-symbol
  `((,GSL_FAILURE . failure)
    (,GSL_CONTINUE . continue)
    (,GSL_EDOM . dom)
    (,GSL_ERANGE . range)
    (,GSL_EFAULT . fault)
    (,GSL_EINVAL . inval)
    (,GSL_EFAILED . failed)
    (,GSL_EFACTOR . factor)
    (,GSL_ESANITY . sanity)
    (,GSL_ENOMEM . nomem)
    (,GSL_EBADFUNC . badfunc)
    (,GSL_ERUNAWAY . runaway)
    (,GSL_EMAXITER . maxiter)
    (,GSL_EZERODIV . zerodiv)
    (,GSL_EBADTOL . badtol)
    (,GSL_ETOL . tol)
    (,GSL_EUNDRFLW . undrflw)
    (,GSL_EOVRFLW . ovrflw)
    (,GSL_ELOSS . loss)
    (,GSL_EROUND . round)
    (,GSL_EBADLEN . badlen)
    (,GSL_ENOTSQR . notsqr)
    (,GSL_ESING . sing)
    (,GSL_EDIVERGE . diverge)
    (,GSL_EUNSUP . unsup)
    (,GSL_EUNIMPL . unimpl)
    (,GSL_ECACHE . cache)
    (,GSL_ETABLE . table)
    (,GSL_ENOPROG . noprog)
    (,GSL_ENOPROGJ . noprogj)
    (,GSL_ETOLF . tolf)
    (,GSL_ETOLX . tolx)
    (,GSL_ETOLG . tolg)
    (,GSL_EOF . eof)))

(define gsl-strerror
  (foreign-lambda c-string "gsl_strerror" (const int)))

(define-foreign-type gsl-errno
  int
  #f
  (lambda (errno)
    (if (= errno GSL_SUCCESS)
        (void)
        (signal (condition '(gsl file unknown line unknown)
                           '(no-handler)
                           `(,(alist-ref errno errno-to-symbol = 'unknown-error))
                           `(exn message ,(gsl-strerror errno)))))))
